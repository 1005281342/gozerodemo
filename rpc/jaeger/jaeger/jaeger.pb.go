// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.14.0
// source: jaeger.proto

package jaeger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Cnt     int32  `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
}

func (x *NodeReq) Reset() {
	*x = NodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jaeger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeReq) ProtoMessage() {}

func (x *NodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_jaeger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeReq.ProtoReflect.Descriptor instead.
func (*NodeReq) Descriptor() ([]byte, []int) {
	return file_jaeger_proto_rawDescGZIP(), []int{0}
}

func (x *NodeReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NodeReq) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

type NodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *NodeRsp) Reset() {
	*x = NodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jaeger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRsp) ProtoMessage() {}

func (x *NodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_jaeger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRsp.ProtoReflect.Descriptor instead.
func (*NodeRsp) Descriptor() ([]byte, []int) {
	return file_jaeger_proto_rawDescGZIP(), []int{1}
}

func (x *NodeRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_jaeger_proto protoreflect.FileDescriptor

var file_jaeger_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x22, 0x23, 0x0a,
	0x07, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x89, 0x01, 0x0a, 0x06, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x05, 0x4e, 0x6f, 0x64, 0x65, 0x31, 0x12, 0x0f, 0x2e, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65,
	0x32, 0x12, 0x0f, 0x2e, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x33, 0x12, 0x0f, 0x2e, 0x6a,
	0x61, 0x65, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x42, 0x08,
	0x5a, 0x06, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jaeger_proto_rawDescOnce sync.Once
	file_jaeger_proto_rawDescData = file_jaeger_proto_rawDesc
)

func file_jaeger_proto_rawDescGZIP() []byte {
	file_jaeger_proto_rawDescOnce.Do(func() {
		file_jaeger_proto_rawDescData = protoimpl.X.CompressGZIP(file_jaeger_proto_rawDescData)
	})
	return file_jaeger_proto_rawDescData
}

var file_jaeger_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_jaeger_proto_goTypes = []interface{}{
	(*NodeReq)(nil), // 0: jaeger.NodeReq
	(*NodeRsp)(nil), // 1: jaeger.NodeRsp
}
var file_jaeger_proto_depIdxs = []int32{
	0, // 0: jaeger.jaeger.Node1:input_type -> jaeger.NodeReq
	0, // 1: jaeger.jaeger.Node2:input_type -> jaeger.NodeReq
	0, // 2: jaeger.jaeger.Node3:input_type -> jaeger.NodeReq
	1, // 3: jaeger.jaeger.Node1:output_type -> jaeger.NodeRsp
	1, // 4: jaeger.jaeger.Node2:output_type -> jaeger.NodeRsp
	1, // 5: jaeger.jaeger.Node3:output_type -> jaeger.NodeRsp
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_jaeger_proto_init() }
func file_jaeger_proto_init() {
	if File_jaeger_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jaeger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jaeger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jaeger_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jaeger_proto_goTypes,
		DependencyIndexes: file_jaeger_proto_depIdxs,
		MessageInfos:      file_jaeger_proto_msgTypes,
	}.Build()
	File_jaeger_proto = out.File
	file_jaeger_proto_rawDesc = nil
	file_jaeger_proto_goTypes = nil
	file_jaeger_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JaegerClient is the client API for Jaeger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JaegerClient interface {
	Node1(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error)
	Node2(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error)
	Node3(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error)
}

type jaegerClient struct {
	cc grpc.ClientConnInterface
}

func NewJaegerClient(cc grpc.ClientConnInterface) JaegerClient {
	return &jaegerClient{cc}
}

func (c *jaegerClient) Node1(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error) {
	out := new(NodeRsp)
	err := c.cc.Invoke(ctx, "/jaeger.jaeger/Node1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jaegerClient) Node2(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error) {
	out := new(NodeRsp)
	err := c.cc.Invoke(ctx, "/jaeger.jaeger/Node2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jaegerClient) Node3(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error) {
	out := new(NodeRsp)
	err := c.cc.Invoke(ctx, "/jaeger.jaeger/Node3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JaegerServer is the server API for Jaeger service.
type JaegerServer interface {
	Node1(context.Context, *NodeReq) (*NodeRsp, error)
	Node2(context.Context, *NodeReq) (*NodeRsp, error)
	Node3(context.Context, *NodeReq) (*NodeRsp, error)
}

// UnimplementedJaegerServer can be embedded to have forward compatible implementations.
type UnimplementedJaegerServer struct {
}

func (*UnimplementedJaegerServer) Node1(context.Context, *NodeReq) (*NodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node1 not implemented")
}
func (*UnimplementedJaegerServer) Node2(context.Context, *NodeReq) (*NodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node2 not implemented")
}
func (*UnimplementedJaegerServer) Node3(context.Context, *NodeReq) (*NodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node3 not implemented")
}

func RegisterJaegerServer(s *grpc.Server, srv JaegerServer) {
	s.RegisterService(&_Jaeger_serviceDesc, srv)
}

func _Jaeger_Node1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JaegerServer).Node1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.jaeger/Node1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JaegerServer).Node1(ctx, req.(*NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jaeger_Node2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JaegerServer).Node2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.jaeger/Node2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JaegerServer).Node2(ctx, req.(*NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jaeger_Node3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JaegerServer).Node3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.jaeger/Node3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JaegerServer).Node3(ctx, req.(*NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jaeger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.jaeger",
	HandlerType: (*JaegerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Node1",
			Handler:    _Jaeger_Node1_Handler,
		},
		{
			MethodName: "Node2",
			Handler:    _Jaeger_Node2_Handler,
		},
		{
			MethodName: "Node3",
			Handler:    _Jaeger_Node3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jaeger.proto",
}
