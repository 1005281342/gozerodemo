// Code generated by goctl. DO NOT EDIT!
// Source: jaeger.proto

package jaegerclient

import (
	"context"

	"github.com/1005281342/gozerodemo/rpc/jaeger/jaeger"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	NodeReq = jaeger.NodeReq
	NodeRsp = jaeger.NodeRsp

	Jaeger interface {
		Node1(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error)
		Node2(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error)
		Node3(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error)
	}

	defaultJaeger struct {
		cli zrpc.Client
	}
)

func NewJaeger(cli zrpc.Client) Jaeger {
	return &defaultJaeger{
		cli: cli,
	}
}

func (m *defaultJaeger) Node1(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error) {
	client := jaeger.NewJaegerClient(m.cli.Conn())
	return client.Node1(ctx, in, opts...)
}

func (m *defaultJaeger) Node2(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error) {
	client := jaeger.NewJaegerClient(m.cli.Conn())
	return client.Node2(ctx, in, opts...)
}

func (m *defaultJaeger) Node3(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeRsp, error) {
	client := jaeger.NewJaegerClient(m.cli.Conn())
	return client.Node3(ctx, in, opts...)
}
